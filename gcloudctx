#!/usr/bin/env bash
#
# gcloudctx(1) is a utility to manage and switch between gcloud projects.

# Copyright 2018 Olivier Gerbron
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#	 http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

GCLOUDCONF="${HOME}/.config/gcloud"
GCLOUDCTX="${GCLOUDCONF}/gcloudctx"

FORCE_RENAME="false"

YELLOW=$(tput setaf 3)
DARKBG=$(tput setab 0)
NORMAL=$(tput sgr0)

current_project() {
	gcloud config configurations list \
		--format=json \
		| jq -r '.[] | select(.is_active==true).properties.core.project'
}

get_projects() {
	 gcloud projects list --format=json | jq -r '.[].projectId'
}

list_projects() {
	set -u pipefail
	local cur
	cur="$(current_project)"

	for c in $(get_projects); do
		if [[ -t 1 && "${c}" = "${cur}" ]]; then
			echo "${DARKBG}${YELLOW}${c}${NORMAL}"
		else
			echo "${c}"
		fi
	done
}

get_previous_project() {
	if [[ -f "${GCLOUDCTX}" ]]; then
		cat "${GCLOUDCTX}"
	fi
}

save_previous_project() {
	local saved
	saved="$(get_previous_project)"

	if [[ "${saved}" != "${1}" ]]; then
		printf %s "${1}" > "${GCLOUDCTX}"
	fi
}

switch_project() {
	local target
	target="${1}"
	output="$(gcloud config set project "${target}" 2>&1)"
	if [[ "$output" != "Updated property [core/project]." ]]; then
		# Silence default uninteresting output
		echo $output 1>&2
	fi
	echo -e "gcloudctx switched to project:\\t${target}" 1>&2
}

set_project() {
	local prev
	prev="$(current_project)"

	if [[ "${prev}" != "${1}" ]]; then
		save_previous_project "${prev}"
	fi

	switch_project "${1}"
}

swap_to_previous_project() {
	local previous_project
	previous_project="$(get_previous_project)"
	if [[ -z "${previous_project}" ]]; then
		echo "error: No previous project found." >&2
		exit 1
	fi
	set_project "${previous_project}"
}

project_exists() {
	grep -q "^${1}\$" <(get_projects)
}

usage() {
	cat <<"EOF"
USAGE:
	gcloudctx <NAME>			: switch to project <NAME>
	gcloudctx .				: list the current project
	gcloudctx -				: switch to the previous project

	gcloudctx --previous			: list the previous project (if any)
	gcloudctx -l, --list			: list the projects
	gcloudctx -h,--help			: show this message
EOF
	exit 1
}

main() {
	if [[ "$#" -eq 0 ]]; then
		set_project "$(list_projects | fzf --ansi --select-1)"
	fi

	#Getting input args
	while [[ $# -gt 0 ]]
	do
	case $1 in
		.)
			current_project
			break
		;;
		-)
			swap_to_previous_project
			break
		;;
		-l|--list)
			list_projects
			break
		;;
		--previous)
			get_previous_project; echo
			break
		;;
		-h|--help)
			usage
			break
		;;
		-*)
			echo "error: unrecognized flag \"${1}\"" >&2
			usage
			exit 1
		;;
		*)
			set_project "$(list_projects | fzf --ansi --select-1 --query "${1}")"
			break
		;;
	esac
	done

	shift $((OPTIND - 1))
}

main "$@"
